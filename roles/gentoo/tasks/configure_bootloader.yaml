- name: Configure GRUB
  block:
    - name: jump install_grub
      include_role:
        name: feature_grub
        tasks_from: install
  when: "'grub' in features"

- name: Configure EFI stub
  become: yes
  block:
    - name: Get kernel config
      slurp:
        src: /usr/src/linux/.config
      register: kernel_config_file
    - name: Get kernel version information
      set_fact:
        kernel_version_string: "{{kernel_config_file['content'] | b64decode | regex_search('^# Linux.* (\\S*) Kernel Configuration$', multiline=True) | regex_replace('# Linux.* (\\S*) Kernel Configuration', '\\1') }}"
        kernel_localversion: "{{kernel_config_file['content'] | b64decode | regex_search('^CONFIG_LOCALVERSION=\"(\\S*)\"$', multiline=True) | regex_replace('CONFIG_LOCALVERSION=\"(\\S*)\"', '\\1') }}"
    - name: Set the kernel version string and partition number
      set_fact:
         kernel_string: "{{kernel_version_string}}{{kernel_localversion}}"
         partition_number: "{{efi_device | regex_replace('^.*-part([0-9]*)', '\\1') if efi_device is defined else '1'}}"

    - name: Get the boot partition UUID
      command: "lsblk /dev/disk/by-id/{% if efi_device is defined %}{{efi_device}}{% else %}{{boot_device}}-part1{% endif %} -n -o PARTUUID"
      register: partition_uuid

    - name: Configure bootloader entry
      command: "efibootmgr -c -l 'vmlinuz-{{kernel_string}}' -L 'ansible-efistub' -d /dev/disk/by-partuuid/{{partition_uuid.stdout_lines[0]}} -p {{partition_number}}"
  when: efi_stub
